{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/app.js","src/assets.js","src/objects/Logo.js","src/states/Boot.js","src/states/Game.js","src/states/Preloader.js","src/states/index.js"],"names":["f","exports","module","define","amd","g","window","global","self","this","app","e","t","n","r","s","o","u","a","require","i","Error","code","l","call","length","1","states","init","game","Phaser","Game","AUTO","Object","keys","forEach","key","state","add","start","boot","type","Logo","x","y","Sprite","anchor","set","prototype","create","constructor","update","angle","assets","preload","load","path","input","maxPointers","scale","pageAlignHorizontally","scaleMode","ScaleManager","NO_SCALE","stage","disableVisibilityChange","tweens","frameBased","pack","world","centerX","centerY","existing","text","fill","font","fontStyle","stroke","strokeThickness","showSplashScreen","image","setPreloadSprite","Boot","Preloader"],"mappings":"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","file":"game.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","/*\n * `app` module\n * ============\n *\n * Provides the game initialization routine.\n */\n\n'use strict';\n\n// Import game states.\nvar states = require('./states');\n\nexports.init = function () {\n  var game = new Phaser.Game(640, 480, Phaser.AUTO);\n\n  // Dynamically add all required game states.\n  Object\n    .keys(states)\n    .forEach(function (key) {\n      game.state.add(key, states[key]);\n    });\n\n  game.state.start('Boot');\n\n  return game;\n};\n","/*\n * `assets` module\n * ===============\n *\n * Declares static asset packs to be loaded using the `Phaser.Loader#pack`\n * method. Use this module to declare game assets.\n */\n\n'use strict';\n\n// -- Splash screen assets used by the Preloader.\nexports.boot = [{\n  key: 'splash-screen',\n  type: 'image'\n}, {\n  key: 'progress-bar',\n  type: 'image'\n}];\n\n// -- General assets used throughout the game.\nexports.game = [{\n  key: 'phaser',\n  type: 'image'\n}];\n","/*\n * Logo\n * ====\n *\n * A sample prefab (extended game object class), displaying a spinning Phaser\n * logo.\n */\n\n'use strict';\n\nfunction Logo(game, x, y) {\n  Phaser.Sprite.call(this, game, x, y, 'phaser');\n\n  this.anchor.set(0.5);\n}\nLogo.prototype = Object.create(Phaser.Sprite.prototype);\nmodule.exports = Logo.prototype.constructor = Logo;\n\nLogo.prototype.update = function () {\n  this.angle += 0.1;\n};\n","/*\n * Boot state\n * ==========\n *\n * The first state of the game, responsible for setting up some Phaser\n * features. Adjust the game appearance, number of input pointers, screen\n * orientation handling etc. using this game state.\n */\n\n'use strict';\n\nvar assets = require('../assets');\n\nexports.preload = function (game) {\n  // Point the Phaser Asset Loader to where your game assets live.\n  game.load.path = 'assets/';\n\n  // Initialize physics engines here. Remember that Phaser builds including\n  // Arcade Physics have it enabled by default.\n  //game.physics.startSystem(Phaser.Physics.P2);\n\n  // Adjust how many pointers Phaser will check for input events.\n  game.input.maxPointers = 2;\n\n  // Set the alignment of the game canvas within the page.\n  game.scale.pageAlignHorizontally = true;\n\n  // Adjust the scaling mode of the game canvas.\n  // Example: If you're developing a pixel-art game, set it to 'USER_SCALE'.\n  game.scale.scaleMode = Phaser.ScaleManager.NO_SCALE;\n\n  // When using 'USER_SCALE' scaling mode, use this method to adjust the\n  // scaling factor.\n  //game.scale.setUserScale(2);\n\n  // Uncomment the following line to adjust the rendering of the canvas to\n  // crisp graphics. Great for pixel-art!\n  //Phaser.Canvas.setImageRenderingCrisp(game.canvas);\n\n  // Uncomment this line to disable smoothing of textures.\n  //game.stage.smoothed = false;\n\n  // If the game canvas loses focus, keep the game loop running.\n  game.stage.disableVisibilityChange = true;\n\n  // Whether to use frame-based interpolations or not.\n  game.tweens.frameBased = false;\n\n  // Load the graphical assets required to show the splash screen later,\n  // using the asset pack data.\n  game.load.pack('boot', null, assets);\n};\n\nexports.create = function (game) {\n  // After applying the first adjustments and loading the splash screen\n  // assets, move to the next game state.\n  game.state.start('Preloader');\n};\n","/*\n * Game state\n * ==========\n *\n * A sample Game state, displaying the Phaser logo.\n */\n\n'use strict';\n\nvar Logo = require('../objects/Logo');\n\nexports.create = function (game) {\n  // TODO: Replace this with a really cool game code here :)\n  var x = game.world.centerX;\n  var y = game.world.centerY;\n  game.add.existing(new Logo(game, x, y));\n\n  var caption = game.add.text(320, 240, 'Pong Clone', {\n    fill: 'white',\n    font: '48px Arial',\n    fontStyle: 'bold',\n    stroke: 'black',\n    strokeThickness: 3\n  });\n  caption.anchor.set(0.5);\n};\n","/*\n * Preloader state\n * ===============\n *\n * Takes care of loading the main game assets, including graphics and sound\n * effects, while displaying a busy splash screen.\n */\n\n'use strict';\n\nvar assets = require('../assets');\n\nfunction showSplashScreen (game) {\n  game.add.image(0, 0, 'splash-screen');\n  game.load.setPreloadSprite(game.add.image(82, 282, 'progress-bar'));\n}\n\nexports.preload = function (game) {\n  showSplashScreen(game);\n  game.load.pack('game', null, assets);\n};\n\nexports.create = function (game) {\n  // Here is a good place to initialize plugins dependent of any game asset.\n  // Don't forget to `require` them first. Example:\n  //game.myPlugin = game.plugins.add(MyPlugin/*, ... parameters ... */);\n  game.state.start('Game');\n};\n","/*\n * `states` module\n * ===============\n *\n * Declares all present game states.\n * Expose the required game states using this module.\n */\n\n'use strict';\n\nexports.Boot = require('./Boot');\nexports.Preloader = require('./Preloader');\nexports.Game = require('./Game');\n"]}